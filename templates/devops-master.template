---
AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - AvailabilityZones
          - VPCCIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
      - Label:
          default: Bastion Server configuration
        Parameters:
          - KeyPairName
          - BastionInstanceType
          - RemoteAccessCIDR
          - BastionAMIOS
      - Label:
          default: Application Server configuration
        Parameters:
          - AppInstanceType
          - AppKeyPairName
      - Label:
          default: SNS configuration
        Parameters:
          - OperatorEMail
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
      - Label:
          default: CodeCommit Configuration
        Parameters:
          - CodeCommitRepoName
      - Label:
          default: CodeBuild Configuration
        Parameters:
          - ComputeType
          
    ParameterLabels:
      VPCCIDR:
        default: VPC CIDR
      PrivateSubnet1CIDR:
        default: Private Subnet 1 CIDR
      PrivateSubnet2CIDR:
        default: Private Subnet 2 CIDR
      PublicSubnet1CIDR:
        default: Public Subnet 1 CIDR
      PublicSubnet2CIDR:
        default: Public Subnet 2 CIDR
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      OperatorEMail:
        default: Email ID to recieve alert notifications
      BastionInstanceType:
        default: Bastion Instance Type
      BastionAMIOS:
        default: Bastion AMI Operating System
      AppInstanceType:
        default: Application Instance Type
      KeyPairName:
        default: BastionHost Key pair name
      AppKeyPairName:
        default: Application Host Key pair name
      RemoteAccessCIDR:
        default: Allowed Bastion external access CIDR
      AvailabilityZones:
        default: Availability Zones
      CodeCommitRepoName:
        default: Name of the repository
      ComputeType:
        default: CodeBuild Compute Type
Parameters:
  VPCCIDR:
    Type: String
    Description: CIDR range for your VPC 
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    Default: 10.0.0.0/16
  PrivateSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/19
    Description: CIDR block for private subnet 1 located in Availability Zone 1
    Type: String
  PrivateSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.32.0/19
    Description: CIDR block for private subnet 2 located in Availability Zone 2
    Type: String
  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.128.0/20
    Description: CIDR block for the public (DMZ) subnet 1 located in Availability
      Zone 1
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.144.0/20
    Description: CIDR block for the public (DMZ) subnet 2 located in Availability
      Zone 2
    Type: String
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: "S3 bucket where the Quick Start templates and scripts are installed.\
      \ Use this parameter to specify the S3 bucket name you\u2019ve created for your\
      \ copy of Quick Start assets, if you decide to customize or extend the Quick\
      \ Start for your own use. The bucket name can include numbers, lowercase letters,\
      \ uppercase letters, and hyphens, but should not start or end with a hyphen."
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/). It cannot start or end
      with forward slash (/) because they are automatically appended.
    Default: quickstart-examples/
    Description: S3 key prefix used to simulate a folder for your copy of Quick Start
      assets, if you decide to customize or extend the Quick Start for your own use.
      This prefix can include numbers, lowercase letters, uppercase letters, hyphens,
      and forward slashes.
    Type: String
  OperatorEMail:
    Description: Email address to notify scaling operations
    Type: String
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: Must be a valid email address.
  BastionAMIOS:
    AllowedValues:
      - Amazon-Linux-HVM
    Default: Amazon-Linux-HVM
    Description: The Linux distribution for the AMI to be used for the bastion instances
    Type: String
  BastionInstanceType:
    Description: Bastion Host EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.   
  AppInstanceType:
    Description: App Server EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KeyPairName:
    Description: Public/private key pairs allow you to securely connect to your instance after it launches. If you do not have one in this region, please create it before continuing
    Type: AWS::EC2::KeyPair::KeyName
  AppKeyPairName:
    Description: Public/private key pairs allow you to securely connect to your instance after it launches. If you do not have one in this region, please create it before continuing
    Type: AWS::EC2::KeyPair::KeyName
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Description: A CIDR block thatâ€™s allowed external access to the Bastion. We recommend that you use a constrained CIDR range to reduce the potential of inbound attacks from unknown IP addresses.(see http://checkip.dyndns.org/)
    Type: String
  AvailabilityZones:
    Description: List of Availability Zones to use for the subnets in the VPC. Only
      two Availability Zones are used for this deployment, and the logical order of
      your selections is preserved.
    Type: List<AWS::EC2::AvailabilityZone::Name>
  CodeCommitRepoName:
    Description: Name of codecommit repository
    Type: String
  ComputeType:
    Description: The type of compute environment
    Type: String
    AllowedValues:
      - BUILD_GENERAL1_SMALL
      - BUILD_GENERAL1_MEDIUM
      - BUILD_GENERAL1_LARGE
    Default: BUILD_GENERAL1_SMALL

Mappings:

  InstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64    

  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-2a69aa47
      HVM64: ami-6869aa05
      HVMG2: ami-61e27177
    us-west-2:
      PV64: ami-7f77b31f
      HVM64: ami-7172b611
      HVMG2: ami-60aa3700
    us-west-1:
      PV64: ami-a2490dc2
      HVM64: ami-31490d51
      HVMG2: ami-4b694d2b
    eu-west-1:
      PV64: ami-4cdd453f
      HVM64: ami-f9dd458a
      HVMG2: ami-2955524f
    eu-west-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-886369ec
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      PV64: ami-6527cf0a
      HVM64: ami-ea26ce85
      HVMG2: ami-81ac71ee
    ap-northeast-1:
      PV64: ami-3e42b65f
      HVM64: ami-374db956
      HVMG2: ami-46220c21
    ap-northeast-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-2b408b45
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      PV64: ami-df9e4cbc
      HVM64: ami-a59b49c6
      HVMG2: ami-c212aba1
    ap-southeast-2:
      PV64: ami-63351d00
      HVM64: ami-dc361ebf
      HVMG2: ami-0ad2db69
    ap-south-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-ffbdd790
      HVMG2: ami-ca3042a5
    us-east-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-f6035893
      HVMG2: NOT_SUPPORTED
    ca-central-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-730ebd17
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      PV64: ami-1ad34676
      HVM64: ami-6dd04501
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      PV64: ami-77559f1a
      HVM64: ami-8e6aa0e3
      HVMG2: NOT_SUPPORTED
      
Resources:

  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        Fn::Sub: https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-aws-vpc/templates/aws-vpc.template
      Parameters:
        AvailabilityZones:
          Fn::Join:
          - ','
          - Ref: AvailabilityZones
        KeyPairName:
          Ref: KeyPairName
        NumberOfAZs: '2'
        PrivateSubnet1ACIDR:
          Ref: PrivateSubnet1CIDR
        PrivateSubnet2ACIDR:
          Ref: PrivateSubnet2CIDR
        PublicSubnet1CIDR:
          Ref: PublicSubnet1CIDR
        PublicSubnet2CIDR:
          Ref: PublicSubnet2CIDR
        VPCCIDR:
          Ref: VPCCIDR
          
  BastionStack:
    DependsOn: VPCStack
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        Fn::Sub: https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-linux-bastion/templates/linux-bastion.template
      Parameters:
        BastionAMIOS:
          Ref: BastionAMIOS
        BastionInstanceType:
          Ref: BastionInstanceType
        KeyPairName:
          Ref: KeyPairName
        PublicSubnet1ID:
          Fn::GetAtt:
          - VPCStack
          - Outputs.PublicSubnet1ID
        PublicSubnet2ID:
          Fn::GetAtt:
          - VPCStack
          - Outputs.PublicSubnet2ID
        QSS3BucketName:
          Ref: QSS3BucketName
        QSS3KeyPrefix:
          Fn::Sub: ${QSS3KeyPrefix}submodules/quickstart-linux-bastion/
        RemoteAccessCIDR:
          Ref: RemoteAccessCIDR
        VPCID:
          Fn::GetAtt:
          - VPCStack
          - Outputs.VPCID
    
  CodeCommitSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref 'OperatorEMail'
          Protocol: email
  CodeCommitSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: AllowCloudwatchEventsToPublish
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - events.amazonaws.com
          Action: sns:Publish
          Resource: !Ref CodeCommitSNSTopic
      Topics:
      - !Ref CodeCommitSNSTopic
  CodeCommitEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - !Join [ '', [ 'arn:aws:codecommit:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref CodeCommitRepoName ] ]
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - master
      Targets:
        -
          Id: "CodeCommitSNSTopicEvent"
          Arn: !Ref CodeCommitSNSTopic      
          
  AutoScalingNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref 'OperatorEMail'
          Protocol: email
  AutoScalingSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - events.amazonaws.com
          Action: sns:Publish
          Resource: !Ref AutoScalingNotificationTopic
      Topics:
      - !Ref AutoScalingNotificationTopic

  ArtifactsBucket:
    Type: AWS::S3::Bucket    
    Properties:
      VersioningConfiguration:
        Status: Enabled
    DeletionPolicy: Retain

  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'AppRole'
  AppPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AppPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "cloudwatch:PutMetricData"
            Resource: '*'
          - Effect: Allow
            Action:
              - "s3:AbortMultipartUpload"
              - "s3:GetBucketLocation"
              - "s3:Get*"
              - "s3:ListBucket"
              - "s3:ListBucketMultipartUploads"
              - "s3:Put*"
              - "s3:GetBucketAcl"
              - "s3:ListAllMyBuckets"
            Resource: '*'
          - Effect: Allow
            Action:
              - "cloudformation:DescribeStackResource"
              - "cloudformation:SignalResource"
            Resource: '*'
          - Effect: Allow
            Action:
              - "codecommit:*"
            Resource: '*'
          - Effect: Allow
            Action:
              - "sts:AssumeRole"
            Resource: '*'
      Roles:
        - !Ref 'AppRole'
  AppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
    
  CodeBuildRole:
    Type: AWS::IAM::Role
    Description: Creating service role in IAM for Amazon EC2 instances
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
      Path: /
      RoleName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - CodeBuild
  CodeBuildPolicy:
    Type: AWS::IAM::Policy          
    Description: Setting IAM policy for service role for CodeBuild
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource: '*'
        - Action:
          - s3:PutObject
          - s3:GetObject
          - s3:GetObjectVersion
          Effect: Allow
          Resource:
          - !Join
            - ''
            - - 'arn:aws:s3:::'
              - !Ref 'ArtifactsBucket'
          - !Join
            - ''
            - - 'arn:aws:s3:::'
              - !Ref 'ArtifactsBucket'
              - /*
        - Action:
          - codecommit:GitPull
          Effect: Allow
          Resource:
          - !Join
            - ':'
            - - arn
              - aws
              - codecommit
              - !Ref 'AWS::Region'
              - !Ref 'AWS::AccountId'
              - !Ref CodeCommitRepoName
        - Action:
          - kms:GenerateDataKey*
          - kms:Encrypt
          - kms:Decrypt
          Effect: Allow
          Resource:
          - !Join
            - ':'
            - - arn:aws:kms
              - !Ref 'AWS::Region'
              - !Ref 'AWS::AccountId'
              - !Join
                - /
                - - alias
                  - aws/s3
      PolicyName: !Join
        - '-'
        -  - !Ref 'AWS::StackName'
           - CodeBuildPolicy
      Roles:
      - !Ref 'CodeBuildRole'

  CodeDeployRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: allow-autoscaling
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - ec2:*
                  - autoscaling:*
                Resource: "*"      
      
  CodePipelineTrustRole:
    Type: AWS::IAM::Role
    Description: Service role for AWS CodePipeline
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Sid: 1
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - sns:Publish
            Effect: Allow
            Resource:
            - !Ref CodeCommitSNSTopic
            - !Ref PipelineSNSTopic
            - !Ref ApprovalSNSTopic
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            - s3:PutObject
            Effect: Allow
            Resource:
            - !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref 'ArtifactsBucket'
            - !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref 'ArtifactsBucket'
                - /*
          - Action:
            - cloudwatch:*
            Effect: Allow
            Resource:
              - '*'
          - Action:
            - codecommit:CancelUploadArchive
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:GetUploadArchiveStatus
            - codecommit:UploadArchive
            Effect: Allow
            Resource:
            - !Join
              - ':'
              - - arn
                - aws
                - codecommit
                - !Ref 'AWS::Region'
                - !Ref 'AWS::AccountId'
                - !Ref CodeCommitRepoName
          - Action:
            - codebuild:StartBuild
            - codebuild:BatchGetBuilds
            - codebuild:StopBuild
            Effect: Allow
            Resource:
            - !GetAtt 'CodeBuildProject.Arn'
          - Action:
            - codedeploy:CreateDeployment
            - codedeploy:GetApplicationRevision
            - codedeploy:GetDeployment
            - codedeploy:GetDeploymentConfig
            - codedeploy:RegisterApplicationRevision
            Effect: Allow
            Resource:
            - !Join
              - ':'
              - - arn
                - aws
                - codedeploy
                - !Ref 'AWS::Region'
                - !Ref 'AWS::AccountId'
                - deploymentgroup
                - !Join
                  - ''
                  - - !Ref 'AWS::StackName'
                    - '*'
            - !Join
              - ':'
              - - arn
                - aws
                - codedeploy
                - !Ref 'AWS::Region'
                - !Ref 'AWS::AccountId'
                - application
                - !Join
                  - ''
                  - - !Ref 'AWS::StackName'
                    - '*'
            - !Join
              - ':'
              - - arn
                - aws
                - codedeploy
                - !Ref 'AWS::Region'
                - !Ref 'AWS::AccountId'
                - deploymentconfig
                - '*'
          - Action:
            - cloudformation:DescribeStacks
            - cloudformation:DescribeChangeSet
            - cloudformation:CreateChangeSet
            - cloudformation:DeleteChangeSet
            - cloudformation:ExecuteChangeSet
            Effect: Allow
            Resource:
            - !Join
              - ':'
              - - arn
                - aws
                - cloudformation
                - !Ref 'AWS::Region'
                - !Ref 'AWS::AccountId'
                - !Join
                  - /
                  - - stack
                    - !Join
                      - '-'
                      -  - !Ref 'AWS::StackName'
                         - '*'
        PolicyName: !Join
          - '-'
          - - !Ref 'AWS::StackName'
            - CodePipelineRolePolicy
      RoleName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - CodePipeline
          
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTP Access to VPC CidrBlock
      VpcId:
        Fn::GetAtt:
        - VPCStack
        - Outputs.VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          SourceSecurityGroupId: !Ref PublicLoadBalancerSG
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !GetAtt BastionStack.Outputs.BastionSecurityGroupID

  AppSecurityGroupTestEnv:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTP Access to VPC CidrBlock
      VpcId:
        Fn::GetAtt:
        - VPCStack
        - Outputs.VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          SourceSecurityGroupId: !Ref PublicLoadBalancerSGTestEnv
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !GetAtt BastionStack.Outputs.BastionSecurityGroupID          

  AppServerGroupTestEnv:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: CodeRepo
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: '1'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
    Properties:
      VPCZoneIdentifier:
        - !GetAtt VPCStack.Outputs.PrivateSubnet1AID
        - !GetAtt VPCStack.Outputs.PrivateSubnet2AID
      LaunchConfigurationName: !Ref 'LaunchConfigTestEnv'
      MinSize: '1'
      MaxSize: '1'
      TargetGroupARNs:
        - !Ref TargetGroupPublicTestEnv
      NotificationConfiguration:
        TopicARN: !Ref 'AutoScalingNotificationTopic'
        NotificationTypes:
          - autoscaling:EC2_INSTANCE_LAUNCH
          - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
          - autoscaling:EC2_INSTANCE_TERMINATE
          - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-AppServerTestEnv
          PropagateAtLaunch: 'true'
  LaunchConfigTestEnv:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: CodeRepo
    Metadata:
      AWS::CloudFormation::Init:
        services:
          sysvint:
            codedeploy-agent:
              enabled: 'true'
              ensureRunning: 'true'    
    Properties:
      KeyName: !Ref 'AppKeyPairName'
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - InstanceType2Arch
          - !Ref 'AppInstanceType'
          - Arch
      SecurityGroups:
        - !Ref 'AppSecurityGroupTestEnv'
      IamInstanceProfile: !Ref 'AppInstanceProfile'
      InstanceType: !Ref 'AppInstanceType'
      UserData: 
        Fn::Base64: 
          !Sub |
          #!/bin/bash -x
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfigTestEnv --region ${AWS::Region}
          yum -y update
          yum install -y ruby
          yum groupinstall -y "Development Tools"
          /bin/mkdir -p /var/www/html/
          /usr/bin/git clone https://github.com/atangirala/nodejs-codedeploy.git
          cd nodejs-codedeploy && /bin/mv * /var/www/html/
          /bin/rm -rf nodejs-codedeploy
          /bin/chmod +x /var/www/html/node-app
          /bin/mv /var/www/html/node-app /etc/init.d/
          curl -sL https://rpm.nodesource.com/setup_10.x | sudo bash -
          yum install -y nodejs          
          cd /mnt 
          /usr/bin/git config --system credential.helper '!aws codecommit credential-helper $@'
          /usr/bin/git config --system credential.UseHttpPath true
          /usr/bin/git clone ${CodeRepo.CloneUrlHttp}
          /bin/cp -r /var/www/html/* /mnt/${CodeCommitRepoName}
          cd /mnt/${CodeCommitRepoName}
          /usr/bin/git add . && /usr/bin/git commit -m "Initial Commit" && /usr/bin/git push origin master
          /bin/rm -rf /mnt/${CodeCommitRepoName}
          cd /home/ec2-user
          /bin/echo "0 12 * * * find /mnt/* -type d -ctime +1 -exec rm -rf {} \;" >> appcron
          /usr/bin/crontab appcron
          /usr/bin/aws s3 cp 's3://aws-codedeploy-${AWS::Region}/latest/codedeploy-agent.noarch.rpm' . --region ${AWS::Region}
          yum install -y codedeploy-agent.noarch.rpm
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AppServerGroupTestEnv          

  AppServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: CodeRepo
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: '2'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
    Properties:
      VPCZoneIdentifier: 
        - !GetAtt VPCStack.Outputs.PrivateSubnet1AID
        - !GetAtt VPCStack.Outputs.PrivateSubnet2AID
      LaunchConfigurationName: !Ref 'LaunchConfig'
      MinSize: '2'
      MaxSize: '4'
      TargetGroupARNs:
        - !Ref TargetGroupPublic
      NotificationConfiguration:
        TopicARN: !Ref 'AutoScalingNotificationTopic'
        NotificationTypes:
          - autoscaling:EC2_INSTANCE_LAUNCH
          - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
          - autoscaling:EC2_INSTANCE_TERMINATE
          - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-AppServer
          PropagateAtLaunch: 'true'
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: CodeRepo
    Metadata:
      AWS::CloudFormation::Init:
        services:
          sysvint:
            codedeploy-agent:
              enabled: 'true'
              ensureRunning: 'true'    
    Properties:
      KeyName: !Ref 'AppKeyPairName'
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - InstanceType2Arch
          - !Ref 'AppInstanceType'
          - Arch
      SecurityGroups:
        - !Ref 'AppSecurityGroup'
      IamInstanceProfile: !Ref 'AppInstanceProfile'
      InstanceType: !Ref 'AppInstanceType'
      UserData: 
        Fn::Base64: 
          !Sub |
          #!/bin/bash -x
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
          yum -y update
          yum install -y ruby
          yum groupinstall -y "Development Tools"
          /bin/mkdir -p /var/www/html/
          /usr/bin/git clone https://github.com/atangirala/nodejs-codedeploy.git
          cd nodejs-codedeploy && /bin/mv * /var/www/html/
          /bin/rm -rf nodejs-codedeploy
          /bin/chmod +x /var/www/html/node-app
          /bin/mv /var/www/html/node-app /etc/init.d/
          curl -sL https://rpm.nodesource.com/setup_10.x | sudo bash -
          yum install -y nodejs          
          cd /mnt 
          /usr/bin/git config --system credential.helper '!aws codecommit credential-helper $@'
          /usr/bin/git config --system credential.UseHttpPath true
          /usr/bin/git clone ${CodeRepo.CloneUrlHttp}
          /bin/cp -r /var/www/html/* /mnt/${CodeCommitRepoName}
          cd /mnt/${CodeCommitRepoName}
          /usr/bin/git add . && /usr/bin/git commit -m "Initial Commit" && /usr/bin/git push origin master
          /bin/rm -rf /mnt/${CodeCommitRepoName}
          cd /home/ec2-user
          /bin/echo "0 12 * * * find /mnt/* -type d -ctime +1 -exec rm -rf {} \;" >> appcron
          /usr/bin/crontab appcron
          /usr/bin/aws s3 cp 's3://aws-codedeploy-${AWS::Region}/latest/codedeploy-agent.noarch.rpm' . --region ${AWS::Region}
          yum install -y codedeploy-agent.noarch.rpm
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AppServerGroup

  AppServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'AppServerGroup'
      Cooldown: '60'
      ScalingAdjustment: '1'
  AppServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'AppServerGroup'
      Cooldown: '60'
      ScalingAdjustment: '-1'
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '90'
      AlarmActions:
        - !Ref 'AppServerScaleUpPolicy'
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref 'AppServerGroup'
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '70'
      AlarmActions:
        - !Ref 'AppServerScaleDownPolicy'
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref 'AppServerGroup'
      ComparisonOperator: LessThanThreshold

  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public LoadBalancer Security Group
      VpcId:
        Fn::GetAtt:
        - VPCStack
        - Outputs.VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'

  PublicLoadBalancerSGTestEnv:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public LoadBalancer Security Group
      VpcId:
        Fn::GetAtt:
        - VPCStack
        - Outputs.VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'
          
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - !GetAtt VPCStack.Outputs.PublicSubnet1ID
        - !GetAtt VPCStack.Outputs.PublicSubnet2ID
      SecurityGroups: [!Ref 'PublicLoadBalancerSG']
  TargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Protocol: HTTP
      Port: 3000
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::GetAtt:
        - VPCStack
        - Outputs.VPCID
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 80
      Protocol: HTTP
      
  PublicLoadBalancerTestEnv:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - !GetAtt VPCStack.Outputs.PublicSubnet1ID
        - !GetAtt VPCStack.Outputs.PublicSubnet2ID
      SecurityGroups: [!Ref 'PublicLoadBalancerSGTestEnv']
  TargetGroupPublicTestEnv:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Protocol: HTTP
      Port: 3000
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::GetAtt:
        - VPCStack
        - Outputs.VPCID
  PublicLoadBalancerListenerTestEnv:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancerTestEnv
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroupPublicTestEnv'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancerTestEnv'
      Port: 80
      Protocol: HTTP      
      
  CodeRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Ref CodeCommitRepoName
      Triggers:
      - Name: MasterTrigger
        CustomData: !Sub ${AWS::StackName}-${CodeCommitRepoName}
        DestinationArn: !Ref CodeCommitSNSTopic
        Branches:
        - Master
        Events:
        - all

  AmazonCloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref CodePipeline ] ]         
        
  AmazonCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "CodeCommit EventRule"
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - !Join [ '', [ 'arn:aws:codecommit:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref CodeCommitRepoName ] ]
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - master
      Targets:
        -
          Arn: 
            !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref CodePipeline ] ]
          RoleArn: !GetAtt AmazonCloudWatchEventRole.Arn
          Id: CloudWatch-CodePipeline
        
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn:
    - CodeBuildPolicy
    Properties:
      Artifacts:
        Location: !Ref 'ArtifactsBucket'
        Name: 'build-output.zip'
        NamespaceType: BUILD_ID
        Packaging: ZIP
        Path: 'codebuild'
        Type: S3
      Description: !Join
        - ''
        - - 'CodeBuild Project for '
          - !Ref 'AWS::StackName'
      Environment:
        ComputeType: !Ref ComputeType
        Image: aws/codebuild/nodejs:8.11.0
        Type: LINUX_CONTAINER
      Name: !Ref 'AWS::StackName'
      ServiceRole: !Ref 'CodeBuildRole'
      Source:
        Type: CODECOMMIT
        Location: !Join
          - ''
          - - 'https://git-codecommit.'
            - !Ref 'AWS::Region'
            - '.amazonaws.com/v1/repos/'
            - !Ref 'CodeCommitRepoName'
        BuildSpec: 'buildspec.yml'

  CodeDeployApplication:
    Type: "AWS::CodeDeploy::Application"    
    Properties:
      ApplicationName: !Sub ${AWS::StackName}-Application
  CodeDeployDefaultOneAtATime: 
    Type: AWS::CodeDeploy::DeploymentConfig
    Properties: 
      MinimumHealthyHosts: 
        Type: "FLEET_PERCENT"
        Value: 50     
  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: !Ref CodeDeployDefaultOneAtATime
      AutoScalingGroups: 
        - !Ref 'AppServerGroup'
        
  CodeDeployApplicationTestEnv:
    Type: "AWS::CodeDeploy::Application"    
    Properties:
      ApplicationName: !Sub ${AWS::StackName}-TestApplication
  CodeDeployDefaultOneAtATimeTestEnv: 
    Type: AWS::CodeDeploy::DeploymentConfig
    Properties: 
      MinimumHealthyHosts: 
        Type: "HOST_COUNT"
        Value: 0
  DeploymentGroupTestEnv:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplicationTestEnv
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: !Ref CodeDeployDefaultOneAtATimeTestEnv
      AutoScalingGroups: 
        - !Ref 'AppServerGroupTestEnv'        
      
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
    - CodePipelineTrustRole
    - ArtifactsBucket
    - PublicLoadBalancer
    - AppServerGroup
    - CodeRepo
    - CodeBuildProject
    - CodeDeployApplication
    - DeploymentGroup
    Properties:
      ArtifactStore:
        Location: !Ref 'ArtifactsBucket'
        Type: S3
      Name: !Ref 'AWS::StackName'
      RoleArn: !GetAtt
      - CodePipelineTrustRole
      - Arn
      Stages:
      - Name: Source
        Actions:
        - ActionTypeId:
            Category: Source
            Owner: AWS
            Provider: CodeCommit
            Version: 1
          Configuration:
            BranchName: master
            PollForSourceChanges: false
            RepositoryName: !Ref CodeCommitRepoName
          InputArtifacts: [
            ]
          Name: ApplicationSource
          OutputArtifacts:
          - Name: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - SourceArtifact
          RunOrder: 1
      - Name: Build
        Actions:
        - ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: 1
          Configuration:
            ProjectName: !Ref CodeBuildProject
          InputArtifacts:
          - Name: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - SourceArtifact
          Name: Build
          OutputArtifacts:
          - Name: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - BuildArtifact
          RunOrder: 1
      - Name: TestDeploy
        Actions:          
        - ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CodeDeploy
            Version: 1
          Configuration:
            ApplicationName: !Ref CodeDeployApplicationTestEnv
            DeploymentGroupName: !Ref DeploymentGroupTestEnv
          InputArtifacts:
          - Name: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - BuildArtifact
          Name: TestDeploy
          OutputArtifacts: [
            ]
          RunOrder: 1          
      - Name: Approval
        Actions:
        - ActionTypeId:
            Category: Approval
            Owner: AWS
            Version: 1
            Provider: Manual
          Configuration:
            NotificationArn: !Ref ApprovalSNSTopic
            CustomData: Manual Approval for Production Deployment
          Name: Approval
          RunOrder: 1          
      - Name: ProductionDeploy
        Actions:          
        - ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CodeDeploy
            Version: 1
          Configuration:
            ApplicationName: !Ref CodeDeployApplication
            DeploymentGroupName: !Ref DeploymentGroup
          InputArtifacts:
          - Name: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - BuildArtifact
          Name: ProductionDeploy
          OutputArtifacts: [
            ]
          RunOrder: 1

  CodePipelineEventRule: 
    Type: "AWS::Events::Rule"
    Properties: 
      Description: "CodePipeline EventRule"
      EventPattern: 
        source:
          - "aws.codepipeline"
        detail-type:
          - "CodePipeline Pipeline Execution State Change"
        detail:
          state:
            - "STARTED"
            - "FAILED"
            - "SUCCEEDED"
          pipeline:
            - !Ref CodePipeline
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Ref: "PipelineSNSTopic"
          Id: "PipelineNotificationTopic"
          InputTransformer:
            InputTemplate: '"The pipeline <pipeline> from account <account> has <state> at <at>."'
            InputPathsMap:
              pipeline: "$.detail.pipeline"
              state: "$.detail.state"
              at: "$.time"
              account: "$.account"

  PipelineSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint:
          Ref: OperatorEMail
        Protocol: email
  PipelineSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - events.amazonaws.com
          Action: sns:Publish
          Resource: !Ref PipelineSNSTopic
      Topics:
      - !Ref PipelineSNSTopic

  ApprovalSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint:
          Ref: OperatorEMail
        Protocol: email
  ApprovalSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - events.amazonaws.com
          Action: sns:Publish
          Resource: !Ref ApprovalSNSTopic
      Topics:
      - !Ref ApprovalSNSTopic
      
Outputs:
  AppSecurityGroup:
    Value: !Ref AppSecurityGroup
  BastionSecurityGroup:
    Value: !GetAtt BastionStack.Outputs.BastionSecurityGroupID    
  InstanceProfile:
    Value: !Ref AppInstanceProfile
  S3Bucket:
    Value: !Ref ArtifactsBucket
  VPCCIDR:
    Value: !Ref VPCCIDR
  PrivateSubnet1CIDR:
    Value: !Ref PrivateSubnet1CIDR
  PrivateSubnet2CIDR:
    Value: !Ref PrivateSubnet2CIDR
  PublicSubnet1CIDR:
    Value: !Ref PublicSubnet1CIDR
  PublicSubnet2CIDR:
    Value: !Ref PublicSubnet2CIDR
  CodeCommitRepoName:
    Value: !Ref CodeCommitRepoName
  ProductionLoadBalancerDNSEndpoint:
    Value: !Sub 'http://${PublicLoadBalancer.DNSName}'
  TestingLoadBalancerDNSEndpoint:
    Value: !Sub 'http://${PublicLoadBalancerTestEnv.DNSName}'
